name: ci-ghcrio

# A push --tags on the repo triggers the workflow
on:
  push:
    branches:
      - "main"
    tags: [ v* ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TMAS_API_KEY: ${{ secrets.TMAS_API_KEY }}
  REGION: eu-central-1
  THRESHOLD: "medium"
  MALWARE_SCAN: true
  SECRETS_SCAN: true
  FAIL_ACTION: false

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Prepare the Docker Buildx environment.
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          
      # Build the image and save it as a tar ball.
      - name: Build and store
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=docker,dest=/tmp/image.tar

      # Scan the build image for vulnerabilities, malware, and secrets.
      - name: Scan
        env:
          SBOM: true # Saves SBOM to sbom.json
        run: |
          # Install tmas latest version
          curl -sL https://gist.githubusercontent.com/mawinkler/72a89148b3bcf7ca06b1f26bc84d763f/raw | bash

          tmas scan \
            -V \
            "$(if [ "$MALWARE_SCAN" = "true" ]; then echo "-M"; fi)" \
            "$(if [ "$SECRETS_SCAN" = "true" ]; then echo "-S"; fi)" \
            -r "$REGION" docker-archive:/tmp/image.tar \
            "$(if [ "$SBOM" = "true" ]; then echo "--saveSBOM"; fi)" | \
            tee result.json

          if [ "$SBOM" = "true" ]; then mv SBOM_* sbom.json; fi

          fail_vul=false
          fail_mal=false
          fail_sec=false
          [ "${THRESHOLD}" = "any" ] && \
            [ $(jq '.vulnerabilities.totalVulnCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "critical" ] && \
            [ $(jq '.vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "high" ] && \
            [ $(jq '.vulnerabilities.highCount + .vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "medium" ] && \
            [ $(jq '.vulnerabilities.mediumCount + .vulnerabilities.highCount + .vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ "${THRESHOLD}" = "low" ] &&
            [ $(jq '.vulnerabilities.lowCount + .vulnerabilities.mediumCount + .vulnerabilities.highCount + .vulnerabilities.criticalCount' result.json) != "0" ] && fail_vul=true

          [ $(jq '.malware.scanResult' result.json) != "0" ] && fail_mal=true

          [ $(jq '.secrets.unmitigatedFindingsCount' result.json) != "0" ] && fail_sec=true

          [ "$fail_vul" = "true" ] && echo "*** Vulnerability threshold exceeded ***" > vulnerabilities || true

          [ "$fail_mal" = "true" ] && echo "*** Malware found ***" > malware || true

          [ "$fail_sec" = "true" ] && echo "*** Secrets found ***" > secrets || true

      # Upload Scan Result and SBOM Artifact if available.
      - name: Upload Scan Result Artifact
        uses: actions/upload-artifact@v4
        with:
          name: scan-result
          path: result.json
          retention-days: 30

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 30

      # Fail the workflow if malwares/secrets found or the vulnerability threshold reached.
      - name: Fail Action
        run: |
          if [ "$FAIL_ACTION" = true ]; then
            if [ -f "malware" ]; then cat malware; fi
            if [ -f "secrets" ]; then cat secrets; fi
            if [ -f "vulnerabilities" ]; then cat vulnerabilities; fi
            if [ -f "malware" ] || [ -f "secrets" ] || [ -f "vulnerabilities" ]; then exit 1; fi
          fi

      # Login to the registry. Here we use ghrc
      - name: Login to the GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Rebuild the image and push to registry. This is fast since everything is cached.
      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}

      - name: Summarize the Docker digest and tags
        run: |
          echo 'Digest: ${{ steps.build.outputs.digest }}'
          echo 'Tags: ${{ steps.meta.outputs.tags }}'

      # Rescan in the registry to support admission control
      - name: Registry Scan
        run: |
          tmas scan \
            -V \
            "$(if [ "$MALWARE_SCAN" = true ]; then echo "-M"; fi)" \
            "$(if [ "$SECRETS_SCAN" = true ]; then echo "-S"; fi)" \
            -r "$REGION" -p linux/amd64 registry:${{ steps.meta.outputs.tags }} || true
